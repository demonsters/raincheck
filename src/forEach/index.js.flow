// @flow

import type { DoWhen, ConstructFunction } from "../_libs/createConstruct";

type KeyExtractor<S> = (item: S, index: number) => string | number;

type ChangedFunction<S> = (
  newValue: S,
  oldValue: S,
  key: string | number
) => void;

type DoOptions<S> = {
  keyExtractor?: KeyExtractor<S>,
  changed?: ChangedFunction<S>
};

type Options<S, P> = {
  do: ConstructFunction<S, P>,
  ...DoOptions<S>
};

// type DefaultValue<S, I = Array<S>> = I | ((item: I) => Array<S>);

// declare export default function forEach<S, P> (startFunc: ConstructFunction<S, P> ): DoWhen<S, Array<S>, P>

declare export default function forEach<S, P>(
  defaultValue: Array<S>,
  options: Options<S, P> | ConstructFunction<S, P>
): DoWhen<S, Array<S>, P>;

declare export default function forEach<S, P, I>(
  mapValue: (item: I) => Array<S>,
  options: Options<S, P> | ConstructFunction<S, P>
): DoWhen<S, I, P>;

type ChainFunctions<S, I> = {
  do: <P>(
    func: ConstructFunction<S, P>,
    options?: DoOptions<S> | ChangedFunction<S>
  ) => DoWhen<S, I, P>
};

declare export default function forEach<S>(
  defaultValue?: Array<S>
): ChainFunctions<S, Array<S>>;

declare export default function forEach<S, I>(
  mapValue: (item: I) => Array<S>
): ChainFunctions<S, I>;
