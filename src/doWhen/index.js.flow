
import type {MiddlewareAPI, Middleware} from 'redux'

type NextFunction = (destructFunction: DestructFunction) => void
type DestructFunction = () => void
type ConstructFunction<P> = (next: NextFunction, ...args:P) => DestructFunction

type CallFunction<P: Array<any>> = (funct: ConstructFunction<P>, params: P | string, key?: string ) => void

type CheckerFunction<P> = (props: P, call: CallFunction) => void

type DoWhen<S> = (state: S, ...rest: Array<*>) => void

declare export default function doWhen<S, P, A> (func: ConstructFunction<S, A> ): DoWhen<S>
