// @flow

import type {DoWhen, ConstructFunction} from '../_libs/createConstruct'

type ChangedFunction<S, P> = (newValue: S, oldValue?: S, ...args: P) => void

type Options<S, P> = $Exact<{
  do: ConstructFunction<S, P>,
  changed?: ChangedFunction<S, P>
}>

type Value<S> = { [key: string]: S } | null | false | void

type ChainFunctions<S, I> = {
  do: <P>(startFunc: ConstructFunction<S, P>, changedFunc?: ChangedFunction<S, P>) => DoWhen<S, I, P>
}

declare export default function forEachEntry<S> (defaultValue: Value<S> | void, changedFunc: ChangedFunction<S>): DoWhen<S, Value<S>>
declare export default function forEachEntry<S, I> (defaultValue:  (item: I) => Value<S> | void, changedFunc: ChangedFunction<S>): DoWhen<S, Value<S>>

// Can't distinguish a object from an function with flow, so this will not give 
declare export default function forEachEntry<S, I> (defaultValue?: Value<S>): ChainFunctions<S, Value<S>>
declare export default function forEachEntry<S, I> (defaultValue?: (item: I) => Value<S>): ChainFunctions<S, I>
