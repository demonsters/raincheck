// @flow

import type {MiddlewareAPI, Middleware} from 'redux'

type NextFunction = (destructFunction: DestructFunction) => void
type ConstructFunction<S, A, P> = (value: ?any, next: NextFunction, ...args: P) => ?DestructFunction
type DestructFunction = () => void
type ChangedFunction<S, P> = (newValue: ?S, oldValue: ?S, ...args: P) => void

type DoWhen<S, P> = (state: S, ...rest: P) => void

declare export default function doForAll<S, A, P> (startFunc: ConstructFunction<S, A, P>, changedFunc: ?ChangedFunction<S, P> ): DoWhen<S, P>

